<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="38">
  <CheatEntries>
    <CheatEntry>
      <ID>12658</ID>
      <Description>"Freecam script for ACZ v1.0 by death_the_d0g (death_the_d0g @ Twitter/deaththed0g @ GitHub)"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>12659</ID>
      <Description>"Create a new savestate before using any of the scripts."</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>004000</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>12676</ID>
      <Description>"/!\WARNING/!\"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>12660</ID>
          <Description>"Do not execute the "LOD options" script during VS or FREE FLIGHT hangar."</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>12664</ID>
          <Description>"Do not execute the "GAMEPLAY freecam mode" script during take-off or in-game custcenes."</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>12671</ID>
          <Description>"Before loading a savestate disable the script, exit the mission/hangar then re-enter and execute it again."</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>12655</ID>
      <Description>"[HANGAR freecam script]"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>008000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>12661</ID>
          <Description>"HANGAR freecam mode"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//Hangar freecam by dead_d0g (death_the_d0g @ twitter)

{$lua}

--//Set search AoB and code-disabling camera function

function gameplayCamControl(toggle)
	if toggle then
		local s = [[
		HANGAR_CAM_CONTROL_PYR + 0x5D :
		db 90 90 90
		HANGAR_CAM_CONTROL_PYR + 0x12E :
		db 90 90 90
		luacall(playSound(findTableFile('Activate')))
		]]
		autoAssemble(s)
	end

	if not toggle then
		local s = [[
		HANGAR_CAM_CONTROL_PYR + 0x5D :
		db 0F 29 11
		HANGAR_CAM_CONTROL_PYR + 0x12E :
		db 0F 29 31
		unregistersymbol(HANGAR_CAM_CONTROL_PYR)
		]]
		autoAssemble(s)
	end
end

search_aob = [[
aobscan(HANGAR_CAM_CONTROL_PYR, 0F 28 02 0F 29 01 BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 09 0F 29 0A BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 12 0F 29 11 BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 81 C1 D0 01 00 00 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 19 0F 29 1A A1 ?0 ?? ?? 0? 83 C0 40 99 A3 ?0 ?? ?? 0? 89 15 ?4 ?? ?? 0? BA ?0 ?? ?? 0? 8B 0D ?0 A? ?? 0? 83 C1 70 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 22 0F 29 21 BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 29 0F 29 2A BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 32 0F 29 31)
registersymbol(HANGAR_CAM_CONTROL_PYR)
]]

--//Get process ID of any active PCSX2 instance then pause it

pcsx2_emu_id = getOpenedProcessID()
pause(pcsx2_emu_id)

--//Run search AoB. If successful then:
--//run he camera code disabler
--//disable control input
--//set camera control speed rates
--//disable hangar HUD graphics


if autoAssemble(search_aob) then

	--[[Toggle code]]
	gameplayCamControl(true)

	 --[[Set global hotkey delay]]
	setGlobalKeyPollInterval(0)

	 --[[Disable controller input]]
	WriteBytes(0x203F70B8, 00, 00, 00 ,00)

	--[[
	Set movement rates here. The higher the value the faster the camera will move.
	This parameter uses floating point numbers only.
	TODO:Find a way to implement an input box (as CE supports them) so the user can input their speed values
	on the fly and avoid the hassle of editing the script every time they want to modify them.
	]]
	move_cam_rate = 5.5 --- X,Z,Y coordinates movement speed
	move_analog_cam_rate = 0.098125 --- PITCH/YAW/ROLL movement speed

	--[[Start search for the camera coordinates]]
	ms = createMemScan()
	ms.firstScan(soExactValue, vtByteArray, nil, "00 00 20 44 00 00 ?? 43 00 00 00 44 00 00 80 3F" , nil, 0x20700000,0x21f00000,"",1,"4",true,nil,nil,nil)
	ms.waitTillDone()
	fl = createFoundList(ms)
	fl.initialize()

	--[[Process found results and create cheat table]]
	if (fl~=nil) then
		al = getAddressList()
		header = al.createMemoryRecord()

		header.Description = "Hangar freecam values"
		header.isGroupHeader = true
		for i = 1, 1 do
			base_address = getAddress(fl[0])

			cont_inpt_dbg = al.createMemoryRecord()
			hngr_cam_xpos = al.createMemoryRecord()
			hngr_cam_ypos = al.createMemoryRecord()
			hngr_cam_zpos = al.createMemoryRecord()
			hngr_cam_p = al.createMemoryRecord()
			hngr_cam_y = al.createMemoryRecord()
			hngr_cam_r = al.createMemoryRecord()
			hngr_enty_vis = al.createMemoryRecord()
			hngr_plcmnt = al.createMemoryRecord()

			controller_input_status = 0x203F70B8
			hangar_camera_xpos = base_address + 0x30
			hangar_camera_ypos = base_address + 0x34
			hangar_camera_zpos = base_address + 0x38
			hangar_camera_pitch = base_address + 0x40
			hangar_camera_yaw = base_address + 0x44
			hangar_camera_roll = base_address + 0x48
			hangar_aircraft_placement_type = base_address + 0x1826
			hangar_aircraft_placement_type_old = readBytes(hangar_aircraft_placement_type)
			hangar_entity_visibility = base_address + 0x1827


			cont_inpt_dbg.Description = "[debug] HANGAR controller input status"
			cont_inpt_dbg.setAddress(controller_input_status)
			cont_inpt_dbg.Aob.Size = 04
			cont_inpt_dbg.ShowAsHex = true
			cont_inpt_dbg.appendToEntry(header)

			hngr_cam_xpos.Description = "HANGAR camera X pos"
			hngr_cam_xpos.setAddress(hangar_camera_xpos)
			hngr_cam_xpos.Type = vtSingle
			hngr_cam_xpos.appendToEntry(header)

			hngr_cam_zpos.Description = "HANGAR camera Z pos"
			hngr_cam_zpos.setAddress(hangar_camera_zpos)
			hngr_cam_zpos.Type = vtSingle
			hngr_cam_zpos.appendToEntry(header)

			hngr_cam_ypos.Description = "HANGAR camera Y pos"
			hngr_cam_ypos.setAddress(hangar_camera_ypos)
			hngr_cam_ypos.Type = vtSingle
			hngr_cam_ypos.appendToEntry(header)

			hngr_cam_p.Description = "HANGAR camera pitch"
			hngr_cam_p.setAddress(hangar_camera_pitch)
			hngr_cam_p.Type = vtSingle
			hngr_cam_p.appendToEntry(header)

			hngr_cam_y.Description = "HANGAR camera yaw"
			hngr_cam_y.setAddress(hangar_camera_yaw)
			hngr_cam_y.Type = vtSingle
			hngr_cam_y.appendToEntry(header)

			hngr_cam_r.Description = "HANGAR camera roll"
			hngr_cam_r.setAddress(hangar_camera_roll)
			hngr_cam_r.Type = vtSingle
			hngr_cam_r.appendToEntry(header)

			hngr_plcmnt.Description = "HANGAR aircraft placement type"
			hngr_plcmnt.setAddress(hangar_aircraft_placement_type)
			hngr_plcmnt.Type = vtByte
			hngr_plcmnt.appendToEntry(header)

			hngr_enty_vis.Description = "HANGAR entity visiblity"
			hngr_enty_vis.setAddress(hangar_entity_visibility)
			hngr_enty_vis.Type = vtByte
			hngr_enty_vis.appendToEntry(header)

			--[[Set hotkeys]]

			mrhk_hngr_cam_xpos = al.getMemoryRecordByDescription("HANGAR camera X pos")
			mrhk_hngr_cam_ypos = al.getMemoryRecordByDescription("HANGAR camera Y pos")
			mrhk_hngr_cam_zpos = al.getMemoryRecordByDescription("HANGAR camera Z pos")
			mrhk_hngr_cam_p = al.getMemoryRecordByDescription("HANGAR camera pitch")
			mrhk_hngr_cam_y = al.getMemoryRecordByDescription("HANGAR camera yaw")
			mrhk_hngr_cam_r = al.getMemoryRecordByDescription("HANGAR camera roll")

			key1 = mrhk_hngr_cam_xpos.createHotkey({VK_D},mrhIncreaseValue,move_cam_rate,"HANGAR camera X pos")
			key2 = mrhk_hngr_cam_xpos.createHotkey({VK_A},mrhDecreaseValue,move_cam_rate,"HANGAR camera X pos")
			key1 = mrhk_hngr_cam_ypos.createHotkey({VK_E},mrhIncreaseValue,move_cam_rate,"HANGAR camera Y pos")
			key2 = mrhk_hngr_cam_ypos.createHotkey({VK_Q},mrhDecreaseValue,move_cam_rate,"HANGAR camera Y pos")
			key1 = mrhk_hngr_cam_zpos.createHotkey({VK_S},mrhIncreaseValue,move_cam_rate,"HANGAR camera Z pos")
			key2 = mrhk_hngr_cam_zpos.createHotkey({VK_W},mrhDecreaseValue,move_cam_rate,"HANGAR camera Z pos")

			key1 = mrhk_hngr_cam_p.createHotkey({VK_I},mrhIncreaseValue,move_analog_cam_rate,"HANGAR camera pitch")
			key2 = mrhk_hngr_cam_p.createHotkey({VK_K},mrhDecreaseValue,move_analog_cam_rate,"HANGAR camera pitch")
			key1 = mrhk_hngr_cam_y.createHotkey({VK_J},mrhIncreaseValue,move_analog_cam_rate,"HANGAR camera yaw")
			key2 = mrhk_hngr_cam_y.createHotkey({VK_L},mrhDecreaseValue,move_analog_cam_rate,"HANGAR camera yaw")
			key1 = mrhk_hngr_cam_r.createHotkey({VK_O},mrhIncreaseValue,move_analog_cam_rate,"HANGAR camera roll")
			key2 = mrhk_hngr_cam_r.createHotkey({VK_U},mrhDecreaseValue,move_analog_cam_rate,"HANGAR camera roll")
		end
		fl.destroy()
		fl = nil
	else
		ms.destroy()
	end
	ms.destroy()


	--[[Start search for HUD elements and disable them]]

	ms = createMemScan()
	ms.firstScan(soExactValue, vtByteArray, nil,"00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 61 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 B8 3D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 0C 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 8C 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 9E 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 BA 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 E8 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 F6 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 0C 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 23 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 28 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 3A 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 3E 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 51 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 54 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 69 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00", nil, 0x20700000,0x21f00000,"",1,"4",true,nil,nil,nil)
	ms.waitTillDone()
	fl = createFoundList(ms)
	fl.initialize()

	--[[Process found results and create cheat table]]

	if (fl~=nil) then
		al = getAddressList()
		for i = 1, 1 do
			base_address = getAddress(fl[0])

			hngr_hud_stff1 = al.createMemoryRecord()
			hngr_hud_stff2 = al.createMemoryRecord()
			hngr_hud_stff3 = al.createMemoryRecord()

			hangar_hud_stuff1 = base_address + 0xC
			hangar_hud_stuff2 = base_address + 0x4CC
			hangar_hud_stuff3 = base_address + 0x4EC

			writeBytes(hangar_hud_stuff1, 0, 0, 0, 0)
			writeBytes(hangar_hud_stuff2, 0, 0, 0, 0)
			writeBytes(hangar_hud_stuff3, 0, 0, 0, 0)

			hngr_hud_stff1.Description = "Hangar HUD stuff 1"
			hngr_hud_stff1.setAddress(hangar_hud_stuff1)
			hngr_hud_stff1.Aob.Size = 04
			hngr_hud_stff1.ShowAsHex = true
			hngr_hud_stff1.appendToEntry(header)

			hngr_hud_stff2.Description = "Hangar HUD stuff 2"
			hngr_hud_stff2.setAddress(hangar_hud_stuff2)
			hngr_hud_stff2.Aob.Size = 04
			hngr_hud_stff2.ShowAsHex = true
			hngr_hud_stff2.appendToEntry(header)

			hngr_hud_stff3.Description = "Hangar HUD stuff 3"
			hngr_hud_stff3.setAddress(hangar_hud_stuff3)
			hngr_hud_stff3.Aob.Size = 04
			hngr_hud_stff3.ShowAsHex = true
			hngr_hud_stff3.appendToEntry(header)

		end
		fl.destroy()
		fl = nil
	else
		ms.destroy()
	end
	ms.destroy()

	--[[Start search for the display values of that pie-chart thingy and disable it]]

	ms = createMemScan()
	ms.firstScan(soExactValue, vtByteArray, nil, "40 99 3D 00" , nil, 0x20700000,0x21f00000,"",1,"4",true,nil,nil,nil)
	ms.waitTillDone()
	fl = createFoundList(ms)
	fl.initialize()

	--[[Process found results and create cheat table]]

	if (fl~=nil) then
		al = getAddressList()
		for i = 1, 1 do
			base_address = getAddress(fl[0])

			pie_chrt = al.createMemoryRecord()
			pie_chart_graphic = base_address - 0x8
			writeBytes(pie_chart_graphic, 0, 0, 176, 27)

			pie_chrt.Description = "Hangar HUD stuff 4"
			pie_chrt.setAddress(pie_chart_graphic)
			pie_chrt.Aob.Size = 04
			pie_chrt.ShowAsHex = true
			pie_chrt.appendToEntry(header)

		end

		fl.destroy()
		fl = nil

	else
		ms.destroy()
	end

	ms.destroy()

	--[[Start search for entities coordinates and ground reflection effect]]
	--//Note about ground reflection effect:
	--This value is only available for specific hangars.

	ms = createMemScan()
	ms.firstScan(soExactValue, vtByteArray, nil, "00 00 CA 42 00 00 DC C2 00 00 A0 42 00 00 A0 42 00 00 9E 42 00 00 F0 C0 00 00 04 42 7F 7F 7F 7F 7F 7F 7F 7F 00 00 00 46 00 00 57 43 04 00 00 00 00 00 00 40 00 00 20 C1 00 00 F0 41 00 00 F0 C1 00 00 3E 43 00 00 02 43 00 00 0C 42 00 00 20 41 00 00 08 43 00 00 48 C3 00 00 B6 42 00 00 AA 42 00 00 A0 42 00 00 F0 C0 00 00 B6 42 7F 7F 7F 7F 7F 7F 7F 7F 00 00 40 46 00 00 07 43 04 00 00 00 00 00 00 40 00 00 82 43 00 00 F0 41 00 00 B4 C2 00 00 61 43 00 00 40 42 00 00 96 C2 00 00 20 41 00 00 0C 43 00 00 52 C3 00 00 B6 42 00 00 A4 42 00 00 A0 42 00 00 F0 C0 00 00 B6 42 7F 7F 7F 7F 7F 7F 7F 7F 00 00 00 46 00 00 61 43 04 00 00 00 00 00 00 40 00 80 93 C3 00 00 48 42 00 00 00 41 00 00 2F C3 00 00 C8 42 00 00 D2 C2 00 00 20 41 00 00 C8 42 33 33 47 C2 00 00 A0 42 00 00 9E 42 00 00 9C 42 00 00 F0 C0 00 00 E0 41 7F 7F 7F 7F 7F 7F 7F 7F 00 00 00 46 00 00 57 43 04 00 00 00 00 00 00 40 00 00 20 42 00 00 F0 41 00 00 F0 C1 00 00 70 43 00 00 02 43 00 00 0C 42 00 00 20 41", nil, 0x20700000,0x21f00000,"",1,"4",true,nil,nil,nil)
	ms.waitTillDone()
	fl = createFoundList(ms)
	fl.initialize()

	--[[Process found results and create cheat table]]

	if (fl~=nil) then
		al = getAddressList()
		for i = 1, 1 do
			base_address = getAddress(fl[0])

			hngr_plyr_pos0 = al.createMemoryRecord()
			hngr_wngmn_pos0 = al.createMemoryRecord()
			hngr_plyr_pos1 = al.createMemoryRecord()
			hngr_wngmn_pos1 = al.createMemoryRecord()
			hngr_plyr_pos2 = al.createMemoryRecord()
			hngr_wngmn_pos2 = al.createMemoryRecord()
			hngr_plyr_pos3 = al.createMemoryRecord()
			hngr_wngmn_pos3 = al.createMemoryRecord()
			grnd_eff = al.createMemoryRecord()

			hangar_wingman_position0 = base_address
			hangar_player_position0 = base_address + 0x4

			hangar_wingman_position1 = base_address + 0x50
			hangar_player_position1 = base_address + 0x54

			hangar_wingman_position2 = base_address + 0xA0
			hangar_player_position2 = base_address + 0xA4

			hangar_wingman_position3 = base_address + 0xF0
			hangar_player_position3 = base_address + 0xF4

			ground_reflection = base_address + 0x11D

			--writeBytes(ground_reflection, 1) --This option should be left to the user to modify it

			grnd_eff.Description = "Hangar ground reflection effect"
			grnd_eff.setAddress(ground_reflection)
			grnd_eff.Type = vtByte
			grnd_eff.appendToEntry(header)

			hngr_wngmn_pos0.Description = "WINGMAN position in hangar type 0"
			hngr_wngmn_pos0.setAddress(hangar_wingman_position0)
			hngr_wngmn_pos0.Type = vtSingle
			hngr_wngmn_pos0.appendToEntry(header)

			hngr_plyr_pos0.Description = "PLAYER position in hangar 0"
			hngr_plyr_pos0.setAddress(hangar_player_position0)
			hngr_plyr_pos0.Type = vtSingle
			hngr_plyr_pos0.appendToEntry(header)

			hngr_wngmn_pos1.Description = "WINGMAN position in hangar type 1"
			hngr_wngmn_pos1.setAddress(hangar_wingman_position1)
			hngr_wngmn_pos1.Type = vtSingle
			hngr_wngmn_pos1.appendToEntry(header)

			hngr_plyr_pos1.Description = "PLAYER position in hangar 1"
			hngr_plyr_pos1.setAddress(hangar_player_position1)
			hngr_plyr_pos1.Type = vtSingle
			hngr_plyr_pos1.appendToEntry(header)

			hngr_wngmn_pos2.Description = "WINGMAN position in hangar type 2"
			hngr_wngmn_pos2.setAddress(hangar_wingman_position2)
			hngr_wngmn_pos2.Type = vtSingle
			hngr_wngmn_pos2.appendToEntry(header)

			hngr_plyr_pos2.Description = "PLAYER position in hangar 2"
			hngr_plyr_pos2.setAddress(hangar_player_position2)
			hngr_plyr_pos2.Type = vtSingle
			hngr_plyr_pos2.appendToEntry(header)

			hngr_wngmn_pos3.Description = "WINGMAN position in hangar type 3"
			hngr_wngmn_pos3.setAddress(hangar_wingman_position3)
			hngr_wngmn_pos3.Type = vtSingle
			hngr_wngmn_pos3.appendToEntry(header)

			hngr_plyr_pos3.Description = "PLAYER position in hangar 3"
			hngr_plyr_pos3.setAddress(hangar_player_position3)
			hngr_plyr_pos3.Type = vtSingle
			hngr_plyr_pos3.appendToEntry(header)

		end

		fl.destroy()
		fl = nil

	else
		ms.destroy()
	end

	ms.destroy()

	--//Unpause the emulator once the search is done, the values are set and the code was successfully injected
	unpause(pcsx2_emu_id)

else
	--//If search was a failure then print a error message and unpause the emulator
	print("Unable to run the script.")
	unpause(pcsx2_emu_id)
end

{$asm}


[DISABLE]

{$lua}
--//Restore values to default

--[[Restore controller input]]
WriteBytes(0x203F70B8, 48, 125, 105, 00)

--[[Restore controller input. TODO]]
--writeBytes(ground_reflection, 0)

--[[Restore disabled HUD elements]]
writeBytes(hangar_hud_stuff1, 0, 0, 97, 63)
writeBytes(hangar_hud_stuff2, 0, 0, 24, 62)
writeBytes(hangar_hud_stuff3, 0, 0, 24, 62)
writeBytes(pie_chart_graphic, 1, 0, 176, 27)

--[[Restore defaul aircraft positions on the hangar]]

writeBytes(hangar_aircraft_placement_type, hangar_aircraft_placement_type_old)
writeFloat(hangar_wingman_position0, 101)
writeFloat(hangar_player_position0, -110)
writeFloat(hangar_wingman_position1, 136)
writeFloat(hangar_player_position1, -200)
writeFloat(hangar_wingman_position2, 140)
writeFloat(hangar_player_position2, -210)
writeFloat(hangar_wingman_position3, 100)
writeFloat(hangar_player_position3, -49.79999924)

--[[Destroy entries when disabling]]
header.destroy()

--[[Restore NOP'd code]]
gameplayCamControl(false)

{$asm}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>12657</ID>
          <Description>"HANGAR wingman LoD options"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//Hangar wingman LoD options script by dead_d0g (death_the_d0g @ Twitter/Github)
//Optional parameters to control your wingman's aircraft model level of detail
//and animation playback.
//TODO: The LoD injection doesn't work sometimes. Fix this.

//In order to keep the performance stable the game switches between low/mid/high poly/quality models
//for almost everything besides the player's aircraft model.
//For the game's hangar case, the game will keep the "mid-quality" looking model for Pixy/PJ's aircraft
//but switch to the "high-quality" model when the camera highlight on them.
//As soon you are done selecting your SpW the camera will be placed over your wingman's aircraft before jumping
//to their SpW model. In this small timeframe (not even a second) the game will set a "HQ" flag so your wingman's
//aircraft model will use their hiqgh quality model before switching to the "mid" qulaity looking one.


{$lua}

--[[Set array of bytes to search]]
array = "00 00 20 44 00 00 ?? 43 00 00 00 44 00 00 80 3F"

--[[Start search]]

ms = createMemScan()
ms.firstScan(soExactValue, vtByteArray, nil,array, nil, 0x20700000,0x21f00000,"",1,"4",true,nil,nil,nil)
ms.waitTillDone()
fl = createFoundList(ms)
fl.initialize()

--[[Process found results and create cheat table]]

if (fl~=nil) then

	al = getAddressList()

	header2 = al.createMemoryRecord()

	header2.Description = "Hangar wingman options"
	header2.isGroupHeader = true

	for i = 1, 1 do
		base_address = getAddress(fl[0])

		hngr_wngmn_anim = al.createMemoryRecord()
		hngr_wngman_mdl_lod = al.createMemoryRecord()

		hangar_wingman_animation = base_address + 0x1344
		hangar_wingman_aircraft_model_lod = base_address + 0x1822

		hngr_wngman_mdl_lod.Description = "HANGAR aircraft model LOD"
		hngr_wngman_mdl_lod.setAddress(hangar_wingman_aircraft_model_lod)
		hngr_wngman_mdl_lod.Type = vtByte
		hngr_wngman_mdl_lod.appendToEntry(header2)

		hngr_wngmn_anim.Description = "HANGAR wingman animation flag"
		hngr_wngmn_anim.setAddress(hangar_wingman_animation)
		hngr_wngmn_anim.Type = vtByte
		hngr_wngmn_anim.appendToEntry(header2)

end

fl.destroy()
fl = nil

else
	ms.destroy()
	end
	ms.destroy()

{$asm}

//HANGAR wingman model LOD
//Search for the array of bytes then inject a NOP into it

aobscan(HANGAR_WINGMAN_MDL_LOD, 88 11 C7 05 ?8 A? ?? 0? A4 C6 13 00 A1 ?0 A? ?? 0? 83 C0 03 A3 ?0 A? ?? 0? 2B 05 ?? ?? ?? 0? 0F 88 05 00 00 00 E9 ?? ?? ?? D? 8B 0D ?0 ?? ?? 0? 81 C1 97 18 00 00 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F B6 01 A3 ?0 ?? ?? 0? C7 05 ?4 ?? ?? 0? 00 00 00 00 83 25 ?0 ?? ?? 0? 01 C7 05 ?4 ?? ?? 0? 00 00 00 00 81 25 ?0 ?? ?? 0? FF 00 00 00 C7 05 ?4 ?? ?? 0? 00 00 00 00 83 3D ?0 ?? ?? 0? 00 0F 85 69 00 00 00 83 3D ?4 ?? ?? 0? 00 0F 85 5C 00 00 00 8B 0D ?0 ?? ?? 0? 81 C1 80 18 00 00 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F BE 01 99 A3 ?0 ?? ?? 0? 89 15 ?4 ?? ?? 0? C7 05 ?8 A? ?? 0? D0 C6 13 00 A1 ?0 A? ?? 0? 83 C0 07 A3 ?0 A? ?? 0? 2B 05 ?? ?? ?? 0? 0F 88 ?? ?? ?? ?? E9 ?? ?? ?? D? C7 05 ?8 A? ?? 0? B8 C6 13 00 A1 ?0 A? ?? 0? 83 C0 05 A3 ?0 A? ?? 0? 2B 05 ?? ?? ?? 0? 0F 88 ?? ?? ?? ?? E9 ?? ?? ?? D? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 0? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 0? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 0? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??) // should be unique
registersymbol(HANGAR_WINGMAN_MDL_LOD)

HANGAR_WINGMAN_MDL_LOD:
db 90 90

luacall(playSound(findTableFile('Activate')))

[DISABLE]

//[[Restore default values]]

{$asm}

//Restore previously NOP'd code

HANGAR_WINGMAN_MDL_LOD:
db 88 11

unregistersymbol(HANGAR_WINGMAN_MDL_LOD)

{$lua}

--[[destroy entries list]]
header2.destroy()

{$asm}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>12663</ID>
      <Description>"[GAMEPLAY freecam script]"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>008000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>12674</ID>
          <Description>"GAMEPLAY freecam mode"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//Gameplay freecam by dead_d0g (death_the_d0g @ Twitter/Github)
//A "freecam" script for ACZ.

{$lua}

--//Set search AoB and code-disabling camera function

function gameplayCamControl(toggle)
	if toggle then
		local s = [[
		GAMEPLAY_CAM_CONTROL + 0xC0:
		db 90 90 90
		luacall(playSound(findTableFile('Activate')))
		]]
		autoAssemble(s)
	end

	if not toggle then
		local s = [[
		GAMEPLAY_CAM_CONTROL + 0xC0:
		db 0F 29 11
		unregistersymbol(GAMEPLAY_CAM_CONTROL)
		]]
		autoAssemble(s)
	end
end

search_aob = [[
aobscan(GAMEPLAY_CAM_CONTROL, 0F 28 32 0F 29 31 BA ?0 ?? ?? 0? 8B 0D ?0 A? ?? 0? 83 C1 60 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 39 0F 29 3A BA ?0 ?? ?? 0? 8B 0D ?0 A? ?? 0? 81 C1 90 00 00 00 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 02 0F 29 01 BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 09 0F 29 0A BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 12 0F 29 11 8B 0D ?0 ?? ?? 0? 81 C1 4E 01 00 00 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F B6 01) // should be unique
registersymbol(GAMEPLAY_CAM_CONTROL)
]]

--//Get process ID of any active PCSX2 instance then pause it

pcsx2_emu_id = getOpenedProcessID()
pause(pcsx2_emu_id)

--//Run search AoB. If successful then:
--//run he camera code disabler
--//disable control input
--//set camera control speed rates
--//set hotkeys and store previous values
--//fix right-stick analog issue when disabling the script

if autoAssemble(search_aob) then

	--[[Toggle code]]
	gameplayCamControl(true)

	--[[Set global hotkey delay]]
	setGlobalKeyPollInterval(0)

	--[[Disable controller input]]
	writeBytes(0x203F70BC, 00, 00, 00 ,00)

	--[[Set Pause game flag]]
	writeBytes(0x207651E8, 05)

	--[[Disable non-pause HUD]]
	writeBytes(0x203FFBCF, 00)

	--[[
	Set movement rates here. The higher the value the faster the camera will move.
	This parameter uses floating point numbers only.
	]]

	move_cam_rate = 5.5 --- X,Z,Y coordinates movement speed
	move_analog_cam_rate = 0.098125 --- PITCH/YAW/ROLL movement speed

	--[[Start search for the camera coordinates]]

	ms = createMemScan()
	ms.firstScan(soExactValue, vtByteArray, nilnil, 0x20800000,0x21f00000,"",1,"4",true,nil,nil,nil)
	ms.waitTillDone()
	fl = createFoundList(ms)
	fl.initialize()

	--[[Process found results and create cheat table]]
	if (fl~=nil) then
		al = getAddressList()

		header = al.createMemoryRecord()

		header.Description = "GAMEPLAY freecam script"
		header.isGroupHeader = true

		for i = 1, 1 do
			base_address = getAddress(fl[0])

			tps_cam_xpos1 = al.createMemoryRecord() ---///third person view camera
			tps_cam_ypos1 = al.createMemoryRecord()
			tps_cam_zpos1 = al.createMemoryRecord()
			tps_cam_xpos2 = al.createMemoryRecord()
			tps_cam_ypos2 = al.createMemoryRecord()
			tps_cam_zpos2 = al.createMemoryRecord()

			as_cam_pitch = al.createMemoryRecord() ---///analog stick movement
			as_cam_yaw = al.createMemoryRecord()
			as_cam_roll = al.createMemoryRecord()

			p_state = al.createMemoryRecord()
			c_state = al.createMemoryRecord()
			h_state = al.createMemoryRecord()

			third_person_view_camera_xpos1 = base_address + 0xB30
			third_person_view_camera_ypos1 = base_address + 0xB34
			third_person_view_camera_zpos1 = base_address + 0xB38
			third_person_view_camera_xpos2 = base_address + 0xB3C
			third_person_view_camera_ypos2 = base_address + 0xB40
			third_person_view_camera_zpos2 = base_address + 0xB44

			pause_state = 0x207651E8
			controller_state = 0x203F70BC
			hud_state = 0x203FFBCF

			analog_stick_camera_movement_pitch = base_address + 0xC20
			analog_stick_camera_movement_yaw = base_address + 0xC24
			analog_stick_camera_movement_roll = base_address + 0xC28

			third_person_view_camera_xpos1_old = readFloat(third_person_view_camera_xpos1)
			third_person_view_camera_ypos1_old = readFloat(third_person_view_camera_ypos1)
			third_person_view_camera_zpos1_old = readFloat(third_person_view_camera_zpos1)

			third_person_view_camera_xpos2_old = readFloat(third_person_view_camera_xpos2)
			third_person_view_camera_ypos2_old = readFloat(third_person_view_camera_ypos2)
			third_person_view_camera_zpos2_old = readFloat(third_person_view_camera_zpos2)

			tps_cam_xpos1.Description = "tpscam_player_axis_x"
			tps_cam_xpos1.setAddress(third_person_view_camera_xpos1)
			tps_cam_xpos1.Type = vtSingle
			tps_cam_xpos1.appendToEntry(header)

			tps_cam_ypos1.Description = "tpscam_player_axis_y"
			tps_cam_ypos1.setAddress(third_person_view_camera_ypos1)
			tps_cam_ypos1.Type = vtSingle
			tps_cam_ypos1.appendToEntry(header)

			tps_cam_zpos1.Description = "tpscam_player_axis_zoom"
			tps_cam_zpos1.setAddress(third_person_view_camera_zpos1)
			tps_cam_zpos1.Type = vtSingle
			tps_cam_zpos1.appendToEntry(header)

			tps_cam_xpos2.Description = "tpscam_camera_axis_x"
			tps_cam_xpos2.setAddress(third_person_view_camera_xpos2)
			tps_cam_xpos2.Type = vtSingle
			tps_cam_xpos2.appendToEntry(header)

			tps_cam_ypos2.Description = "tpscam_camera_axis_y"
			tps_cam_ypos2.setAddress(third_person_view_camera_ypos2)
			tps_cam_ypos2.Type = vtSingle
			tps_cam_ypos2.appendToEntry(header)

			tps_cam_zpos2.Description = "tpscam_camera_axis_zoom"
			tps_cam_zpos2.setAddress(third_person_view_camera_zpos2)
			tps_cam_zpos2.Type = vtSingle
			tps_cam_zpos2.appendToEntry(header)

			as_cam_pitch.Description = "Analog stick camera pitch"
			as_cam_pitch.setAddress(analog_stick_camera_movement_pitch)
			as_cam_pitch.Type = vtSingle
			as_cam_pitch.appendToEntry(header)

			as_cam_yaw.Description = "Analog stick camera yaw"
			as_cam_yaw.setAddress(analog_stick_camera_movement_yaw)
			as_cam_yaw.Type = vtSingle
			as_cam_yaw.appendToEntry(header)

			as_cam_roll.Description = "Analog stick camera roll"
			as_cam_roll.setAddress(analog_stick_camera_movement_roll)
			as_cam_roll.Type = vtSingle
			as_cam_roll.appendToEntry(header)

			p_state.Description = "Pause state"
			p_state.setAddress(pause_state)
			p_state.Type = vtByte
			p_state.appendToEntry(header)

			c_state.Description = "[DEBUG] Controller input state"
			c_state.setAddress(controller_state)
			c_state.Aob.Size = 04
			c_state.ShowAsHex = true
			c_state.appendToEntry(header)

			h_state.Description = "HUD state"
			h_state.setAddress(hud_state)
			h_state.Type = vtByte
			h_state.appendToEntry(header)

			--[[Set hotkeys]]

			mrhk_tps_cam_xpos1 = al.getMemoryRecordByDescription("tpscam_player_axis_x")
			mrhk_tps_cam_ypos1 = al.getMemoryRecordByDescription("tpscam_player_axis_y")
			mrhk_tps_cam_zpos1 = al.getMemoryRecordByDescription("tpscam_player_axis_zoom")

			mrhk_tps_cam_xpos2 = al.getMemoryRecordByDescription("tpscam_camera_axis_x")
			mrhk_tps_cam_ypos2 = al.getMemoryRecordByDescription("tpscam_camera_axis_y")
			mrhk_tps_cam_zpos2 = al.getMemoryRecordByDescription("tpscam_camera_axis_zoom")

			mrhk_as_cam_pitch = al.getMemoryRecordByDescription("Analog stick camera pitch")
			mrhk_as_cam_yaw = al.getMemoryRecordByDescription("Analog stick camera yaw")
			mrhk_as_cam_roll = al.getMemoryRecordByDescription("Analog stick camera roll")

			key1 = mrhk_tps_cam_xpos1.createHotkey({VK_A},mrhIncreaseValue,move_cam_rate,"tpscam_player_axis_x")
			key2 = mrhk_tps_cam_xpos1.createHotkey({VK_D},mrhDecreaseValue,move_cam_rate,"tpscam_player_axis_x")
			key1 = mrhk_tps_cam_ypos1.createHotkey({VK_S},mrhIncreaseValue,move_cam_rate,"tpscam_player_axis_y")
			key2 = mrhk_tps_cam_ypos1.createHotkey({VK_W},mrhDecreaseValue,move_cam_rate,"tpscam_player_axis_y")
			key1 = mrhk_tps_cam_zpos1.createHotkey({VK_E},mrhIncreaseValue,move_cam_rate,"tpscam_player_axis_zoom")
			key2 = mrhk_tps_cam_zpos1.createHotkey({VK_Q},mrhDecreaseValue,move_cam_rate,"tpscam_player_axis_zoom")

			key1 = mrhk_tps_cam_xpos2.createHotkey({VK_F},mrhIncreaseValue,move_cam_rate,"tpscam_camera_axis_x")
			key2 = mrhk_tps_cam_xpos2.createHotkey({VK_H},mrhDecreaseValue,move_cam_rate,"tpscam_camera_axis_x")
			key1 = mrhk_tps_cam_ypos2.createHotkey({VK_G},mrhIncreaseValue,move_cam_rate,"tpscam_camera_axis_y")
			key2 = mrhk_tps_cam_ypos2.createHotkey({VK_T},mrhDecreaseValue,move_cam_rate,"tpscam_camera_axis_y")
			key1 = mrhk_tps_cam_zpos2.createHotkey({VK_Y},mrhIncreaseValue,move_cam_rate,"tpscam_camera_axis_zoom")
			key2 = mrhk_tps_cam_zpos2.createHotkey({VK_R},mrhDecreaseValue,move_cam_rate,"tpscam_camera_axis_zoom")

			key1 = mrhk_as_cam_pitch.createHotkey({VK_K},mrhIncreaseValue,move_analog_cam_rate,"Analog stick camera pitch")
			key2 = mrhk_as_cam_pitch.createHotkey({VK_I},mrhDecreaseValue,move_analog_cam_rate,"Analog stick camera pitch")
			key1 = mrhk_as_cam_yaw.createHotkey({VK_L},mrhIncreaseValue,move_analog_cam_rate,"Analog stick camera yaw")
			key2 = mrhk_as_cam_yaw.createHotkey({VK_J},mrhDecreaseValue,move_analog_cam_rate,"Analog stick camera yaw")
			key1 = mrhk_as_cam_roll.createHotkey({VK_O},mrhIncreaseValue,move_analog_cam_rate,"Analog stick camera roll")
			key2 = mrhk_as_cam_roll.createHotkey({VK_U},mrhDecreaseValue,move_analog_cam_rate,"Analog stick camera roll")

			--[[Panic key]]

			key3 = mrhk_tps_cam_xpos1.createHotkey({VK_SPACE},mrhSetValue,third_person_view_camera_xpos1_old,"tpscam_player_axis_x")
			key3 = mrhk_tps_cam_ypos1.createHotkey({VK_SPACE},mrhSetValue,third_person_view_camera_ypos1_old,"tpscam_player_axis_y")
			key3 = mrhk_tps_cam_zpos1.createHotkey({VK_SPACE},mrhSetValue,third_person_view_camera_zpos1_old,"tpscam_player_axis_zoom")
			key3 = mrhk_tps_cam_xpos2.createHotkey({VK_SPACE},mrhSetValue,third_person_view_camera_xpos2_old,"tpscam_camera_axis_x")
			key3 = mrhk_tps_cam_ypos2.createHotkey({VK_SPACE},mrhSetValue,third_person_view_camera_ypos2_old,"tpscam_camera_axis_y")
			key3 = mrhk_tps_cam_zpos2.createHotkey({VK_SPACE},mrhSetValue,third_person_view_camera_zpos2_old,"tpscam_camera_axis_zoom")

			key3 = mrhk_as_cam_pitch.createHotkey({VK_SPACE},mrhSetValue,0,"Analog stick camera pitch")
            key3 = mrhk_as_cam_yaw.createHotkey({VK_SPACE},mrhSetValue,0,"Analog stick camera yaw")
			key3 = mrhk_as_cam_roll.createHotkey({VK_SPACE},mrhSetValue,0,"Analog stick camera roll")



		end
		fl.destroy()
		fl=nil
	else
		ms.destroy()
	end
	ms.destroy()

	--[[Disable menu and its HUD graphics]]
	--//Start search for the Pause menu transparency value

	ms = createMemScan()
	ms.firstScan(soExactValue, vtByteArray, nil, "B0 C5 3C 00 01 01 00 ??", nil, 0x20900000,0x21f00000,"",1,"4",true,nil,nil,nil)
	ms.waitTillDone()
	fl = createFoundList(ms)
	fl.initialize()

	--[[Process found results and create cheat table]]
	if (fl~=nil) then
		al = getAddressList()

		for i = 1, 1 do
			zaddress = getAddress(fl[0])
			mntrsnprncy = al.createMemoryRecord()

			menutransparency = zaddress + 0x4

			writeBytes(menutransparency, 00)

			mntrsnprncy.Description = "Pause menu transparency"
			mntrsnprncy.setAddress(menutransparency)
			mntrsnprncy.Type = vtByte
			mntrsnprncy.appendToEntry(header)
		end
		fl.destroy()
		fl=nil
	else
		ms.destroy()
	end
	ms.destroy()

	--[[Right-stick analog fix]]
	--//This fixes an issue with the right-analog stick (the stick that control the camera in-game)
	--//becoming unresponsive when disabling the freecam script

	ms = createMemScan()
	ms.firstScan(soExactValue, vtByteArray, nil, "3C 00 0? 0? ?? ?? FF FF 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ??" , nil, 0x20800000,0x21f00000,"",1,"4",true,nil,nil,nil)
	ms.waitTillDone()
	fl = createFoundList(ms)
	fl.initialize()
	if (fl~=nil) then
		al = getAddressList()
		for i = 1, 1 do
			xaddress = getAddress(fl[0])
			anlg_fix = al.createMemoryRecord()

			analogfix = xaddress + 0x3

			anlg_fix.Description = "Right-stick analog fix"
			anlg_fix.setAddress(analogfix)
			anlg_fix.Type = vtByte
			anlg_fix.appendToEntry(header)

		end
		fl.destroy()
		fl=nil
	else
		ms.destroy()
	end
	ms.destroy()

	--//Unpause the emulator once the search is done, the values are set and the code was successfully injected
	unpause(pcsx2_emu_id)

else
	--//If search was a failure then print a error message and unpause the emulator
	print("Unable to run the script.")
	unpause(pcsx2_emu_id)
end

{$asm}

[DISABLE]

{$lua}
--//Restore values to default

--[[Restore controller input]]
writeBytes(0x203F70BC, 192, 125, 105 ,0)

--[[Restore pause menu visibility]]
writeBytes(menutransparency, 01)

--[[Restore non-pause HUD visibility]]
writeBytes(0x203FFBCF, 01)

--[[Restore default camera position values]]
writeFloat(third_person_view_camera_xpos1, third_person_view_camera_xpos1_old)
writeFloat(third_person_view_camera_ypos1, third_person_view_camera_ypos1_old)
writeFloat(third_person_view_camera_zpos1, third_person_view_camera_zpos1_old)
writeFloat(third_person_view_camera_xpos2, third_person_view_camera_xpos2_old)
writeFloat(third_person_view_camera_ypos2, third_person_view_camera_ypos2_old)
writeFloat(third_person_view_camera_zpos2, third_person_view_camera_zpos2_old)

--[[Right-analog stick fix]]
writeBytes(analogfix, 04)

--[[Unpause game]]
writeBytes(0x207651E8, 04)

--Destroy entries
header.destroy()

--restored previously NOP'd code
gameplayCamControl(false)

{$asm}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>12669</ID>
      <Description>"[Entity coordinates finder]"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>008000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>12670</ID>
          <Description>"Find"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//Entity coordinates finder script by death_the_d0g (@ Twitter and GitHub)
//Locates all the entities that are loaded in a mission and creates a list with their XYZ coordinates.

{$lua}

--[[Start search for entities]]

ms = createMemScan()
ms.firstScan(soExactValue, vtByteArray, nil, "CC CC 4C 42",nil,0x20700000,0x21f00000,"",1,"4",true,nil,nil,nil)
ms.waitTillDone()
fl = createFoundList(ms)
fl.initialize()
nor = fl.Count
arraypos = 0

--[[Process found results and create cheat table]]
if (fl~=nil) then

	al = getAddressList()
	header = al.createMemoryRecord()

	header.Description = "Found entities"
	header.isGroupHeader = true

	for i = 1, nor do

		base_address = getAddress(fl[arraypos])

		m = al.createMemoryRecord()

		xpos = al.createMemoryRecord()
		zpos = al.createMemoryRecord()
		ypos = al.createMemoryRecord()
		yrotation = al.createMemoryRecord()
		zrotation = al.createMemoryRecord()
		xrotation = al.createMemoryRecord()
		hp = al.createMemoryRecord()

		idstring = (readString(base_address + 0x4, 16, false))
		xposoff = base_address - 0x120
		zposoff = xposoff + 0x4
		yposoff = zposoff + 0x4
		yrotoff = xposoff + 0x10
		zrotoff = yrotoff + 0x4
		xrotoff = zrotoff + 0x4
        entityhpoff = base_address + 0x18

		m.Description = idstring
		m.appendToEntry(header)
		m.isGroupHeader = true
		m.options = "[moHideChildren, moActivateChildrenAsWell, moDeactivateChildrenAsWell, moRecursiveSetValue, moAllowManualCollapseAndExpand, moManualExpandCollapse]"

		xpos.Description = "X coordinates"
		xpos.setAddress(xposoff)
		xpos.Type = vtSingle
		xpos.appendToEntry(m)

		zpos.Description = "Z coordinates"
		zpos.setAddress(zposoff)
		zpos.Type = vtSingle
		zpos.appendToEntry(m)

		ypos.Description = "Y coordinates"
		ypos.setAddress(yposoff)
		ypos.Type = vtSingle
		ypos.appendToEntry(m)

		yrotation.Description = "Pitch"
		yrotation.setAddress(yrotoff)
		yrotation.Type = vtSingle
		yrotation.appendToEntry(m)

		zrotation.Description = "Yaw"
		zrotation.setAddress(zrotoff)
		zrotation.Type = vtSingle
		zrotation.appendToEntry(m)

		xrotation.Description = "Roll"
		xrotation.setAddress(xrotoff)
		xrotation.Type = vtSingle
		xrotation.appendToEntry(m)

        hp.Description = "Entity hit points"
        hp.setAddress(entityhpoff)
        hp.Type = vtByte
        hp.appendToEntry(m)

		arraypos = arraypos + 1
	end

	fl.destroy()
	fl = nil

else
	--//If nothing was found just exit and print an error message
	ms.destroy()
	print("No results found")

end

{$asm}
[DISABLE]

{$lua}

--//Destroy created entries when disabling script
header.destroy()

{$asm}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>12678</ID>
      <Description>"[FREE LOOK script]"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>008000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>12679</ID>
          <Description>"FREE LOOK script mode"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//Hangar freecam by dead_d0g (death_the_d0g @ twitter)

{$lua}


base_address = 0x20765231

al = getAddressList()

header = al.createMemoryRecord()
header.Description = "FREE LOOK script"
header.isGroupHeader = true

ky_mssg1 = al.createMemoryRecord()
ky_mssg2 = al.createMemoryRecord()
ky_mssg3 = al.createMemoryRecord()
ky_mssg4 = al.createMemoryRecord()
ky_mssg5 = al.createMemoryRecord()
ky_mssg6 = al.createMemoryRecord()
ky_mssg7 = al.createMemoryRecord()
ky_mssg8 = al.createMemoryRecord()
ky_mssg9 = al.createMemoryRecord()
ky_mssg10 = al.createMemoryRecord()
ky_mssg11 = al.createMemoryRecord()
ky_mssg12 = al.createMemoryRecord()
ky_mssg13 = al.createMemoryRecord()
ky_mssg14 = al.createMemoryRecord()
ky_mssg15 = al.createMemoryRecord()
ky_mssg16 = al.createMemoryRecord()

ky_mssg1.Description = "TRIANGLE = move up"
ky_mssg1.appendToEntry(header)

ky_mssg2.Description = "CROSS = move down"
ky_mssg2.appendToEntry(header)

ky_mssg3.Description = "CIRCLE = move right"
ky_mssg3.appendToEntry(header)

ky_mssg4.Description = "SQUARE = move left"
ky_mssg4.appendToEntry(header)

ky_mssg5.Description = "R1 = move forwards"
ky_mssg5.appendToEntry(header)

ky_mssg6.Description = "L1 = move backwards"
ky_mssg6.appendToEntry(header)

ky_mssg7.Description = "L2 = yaw left"
ky_mssg7.appendToEntry(header)

ky_mssg8.Description = "R2 = yaw right"
ky_mssg8.appendToEntry(header)

ky_mssg9.Description = "L-STICK UP = pitch up"
ky_mssg9.appendToEntry(header)

ky_mssg10.Description = "L-STICK DOWN = pitch down"
ky_mssg10.appendToEntry(header)

ky_mssg11.Description = "L-STICK LEFT = roll left"
ky_mssg11.appendToEntry(header)

ky_mssg12.Description = "L-STICK RIGHT = roll right"
ky_mssg12.appendToEntry(header)

ky_mssg13.Description = "D-PAD LEFT = rotate 90° left"
ky_mssg13.appendToEntry(header)

ky_mssg14.Description = "D-PAD RIGHT = rotate 90° right"
ky_mssg14.appendToEntry(header)

ky_mssg15.Description = "D-PAD UP = set rotation to 0º"
ky_mssg15.appendToEntry(header)

ky_mssg16.Description = "D-PAD DOWN = rotate 90° down"
ky_mssg16.appendToEntry(header)

writeBytes(base_address, 0)

{$asm}


[DISABLE]

{$lua}
writeBytes(base_address, 2)
header.destroy()
{$asm}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>12672</ID>
      <Description>"[Debug]"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>12673</ID>
          <Description>"HANGAR freecam"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//debug stuff, needs cleaning
//yeah

{$lua}

	--[[Start search]]
	ms = createMemScan() --start new search
	ms.firstScan(soExactValue, vtByteArray, nil, "00 00 20 44 00 00 ?? 43 00 00 00 44 00 00 80 3F" , nil, 0x20700000,0x21f00000,"",1,"4",true,nil,nil,nil)
	ms.waitTillDone() --waint until search is done
	fl = createFoundList(ms)
	fl.initialize() --initialize cheat table
	--[[Process found results and create cheat table]]
	if (fl~=nil) then
		al = getAddressList() -- use current address list found
		header = al.createMemoryRecord()

		header.Description = "Hangar freecam values"
		header.isGroupHeader = true
		for i = 1, 1 do
			haddress = getAddress(fl[0]) --get addresses

			cont_inpt_dbg = al.createMemoryRecord()
			hngr_cam_xpos = al.createMemoryRecord()
			hngr_cam_ypos = al.createMemoryRecord()
			hngr_cam_zpos = al.createMemoryRecord()
			hngr_cam_p = al.createMemoryRecord()
			hngr_cam_y = al.createMemoryRecord()
			hngr_cam_r = al.createMemoryRecord()
			hngr_enty_vis = al.createMemoryRecord()
			hngr_plcmnt = al.createMemoryRecord()

			controller_input_status = 0x203F70B8
			hangar_camera_xpos = haddress + 0x30
			hangar_camera_ypos = haddress + 0x34
			hangar_camera_zpos = haddress + 0x38
			hangar_camera_pitch = haddress + 0x40
			hangar_camera_yaw = haddress + 0x44
			hangar_camera_roll = haddress + 0x48
			hangar_aircraft_placement_type = haddress + 0x1826
			hangar_aircraft_placement_type_old = readBytes(hangar_aircraft_placement_type)
			hangar_entity_visibility = haddress + 0x1827


			cont_inpt_dbg.Description = "[debug] HANGAR controller input status"
			cont_inpt_dbg.setAddress(controller_input_status)
			cont_inpt_dbg.Aob.Size = 04
			cont_inpt_dbg.ShowAsHex = true
			cont_inpt_dbg.appendToEntry(header)

			hngr_cam_xpos.Description = "HANGAR camera X pos"
			hngr_cam_xpos.setAddress(hangar_camera_xpos)
			hngr_cam_xpos.Type = vtSingle
			hngr_cam_xpos.appendToEntry(header)

			hngr_cam_zpos.Description = "HANGAR camera Z pos"
			hngr_cam_zpos.setAddress(hangar_camera_zpos)
			hngr_cam_zpos.Type = vtSingle
			hngr_cam_zpos.appendToEntry(header)

			hngr_cam_ypos.Description = "HANGAR camera Y pos"
			hngr_cam_ypos.setAddress(hangar_camera_ypos)
			hngr_cam_ypos.Type = vtSingle
			hngr_cam_ypos.appendToEntry(header)

			hngr_cam_p.Description = "HANGAR camera pitch"
			hngr_cam_p.setAddress(hangar_camera_pitch)
			hngr_cam_p.Type = vtSingle
			hngr_cam_p.appendToEntry(header)

			hngr_cam_y.Description = "HANGAR camera yaw"
			hngr_cam_y.setAddress(hangar_camera_yaw)
			hngr_cam_y.Type = vtSingle
			hngr_cam_y.appendToEntry(header)

			hngr_cam_r.Description = "HANGAR camera roll"
			hngr_cam_r.setAddress(hangar_camera_roll)
			hngr_cam_r.Type = vtSingle
			hngr_cam_r.appendToEntry(header)

			hngr_plcmnt.Description = "HANGAR aircraft placement type"
			hngr_plcmnt.setAddress(hangar_aircraft_placement_type)
			hngr_plcmnt.Type = vtByte
			hngr_plcmnt.appendToEntry(header)

			hngr_enty_vis.Description = "HANGAR entity visiblity"
			hngr_enty_vis.setAddress(hangar_entity_visibility)
			hngr_enty_vis.Type = vtByte
			hngr_enty_vis.appendToEntry(header)
            end
		fl.destroy()
		fl=nil
	else
		ms.destroy()
	end
	ms.destroy()

{$asm}
[DISABLE]
{$lua}

header.destroy()

{$asm}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>12675</ID>
          <Description>" GAMEPLAY freecam"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//debug stuff, needs cleaning
//

{$lua}
	--[[Start search]]
	ms = createMemScan() --start new search
	ms.firstScan(soExactValue, vtByteArray, nilnil, 0x20800000,0x21f00000,"",1,"4",true,nil,nil,nil)
	ms.waitTillDone() --waint until search is done
	fl = createFoundList(ms)
	fl.initialize() --initialize cheat table
	--[[Process found results and create cheat table]]
	if (fl~=nil) then
		al = getAddressList() -- use current address list found

		header = al.createMemoryRecord()

		header.Description = "GAMEPLAY freecam script"
		header.isGroupHeader = true

		for i = 1, 1 do
			haddress = getAddress(fl[0]) --get addresses

			tps_cam_xpos1 = al.createMemoryRecord() ---///third person view camera
			tps_cam_ypos1 = al.createMemoryRecord()
			tps_cam_zpos1 = al.createMemoryRecord()
			tps_cam_xpos2 = al.createMemoryRecord()
			tps_cam_ypos2 = al.createMemoryRecord()
			tps_cam_zpos2 = al.createMemoryRecord()

			as_cam_pitch = al.createMemoryRecord() ---///analog stick movement
			as_cam_yaw = al.createMemoryRecord()
			as_cam_roll = al.createMemoryRecord()

			p_state = al.createMemoryRecord()
			c_state = al.createMemoryRecord()
			h_state = al.createMemoryRecord()

			third_person_view_camera_xpos1 = haddress + 0xB30
			third_person_view_camera_ypos1 = haddress + 0xB34
			third_person_view_camera_zpos1 = haddress + 0xB38
			third_person_view_camera_xpos2 = haddress + 0xB3C
			third_person_view_camera_ypos2 = haddress + 0xB40
			third_person_view_camera_zpos2 = haddress + 0xB44

			pause_state = 0x207651E8
			controller_state = 0x203F70BC
			hud_state = 0x203FFBCF

			analog_stick_camera_movement_pitch = haddress + 0xC20
			analog_stick_camera_movement_yaw = haddress + 0xC24
			analog_stick_camera_movement_roll = haddress + 0xC28

			third_person_view_camera_xpos1_old = readFloat(third_person_view_camera_xpos1)
			third_person_view_camera_ypos1_old = readFloat(third_person_view_camera_ypos1)
			third_person_view_camera_zpos1_old = readFloat(third_person_view_camera_zpos1)

			third_person_view_camera_xpos2_old = readFloat(third_person_view_camera_xpos2)
			third_person_view_camera_ypos2_old = readFloat(third_person_view_camera_ypos2)
			third_person_view_camera_zpos2_old = readFloat(third_person_view_camera_zpos2)

			tps_cam_xpos1.Description = "tpscam_player_axis_x"
			tps_cam_xpos1.setAddress(third_person_view_camera_xpos1)
			tps_cam_xpos1.Type = vtSingle
			tps_cam_xpos1.appendToEntry(header)

			tps_cam_ypos1.Description = "tpscam_player_axis_y"
			tps_cam_ypos1.setAddress(third_person_view_camera_ypos1)
			tps_cam_ypos1.Type = vtSingle
			tps_cam_ypos1.appendToEntry(header)

			tps_cam_zpos1.Description = "tpscam_player_axis_zoom"
			tps_cam_zpos1.setAddress(third_person_view_camera_zpos1)
			tps_cam_zpos1.Type = vtSingle
			tps_cam_zpos1.appendToEntry(header)

			tps_cam_xpos2.Description = "tpscam_camera_axis_x"
			tps_cam_xpos2.setAddress(third_person_view_camera_xpos2)
			tps_cam_xpos2.Type = vtSingle
			tps_cam_xpos2.appendToEntry(header)

			tps_cam_ypos2.Description = "tpscam_camera_axis_y"
			tps_cam_ypos2.setAddress(third_person_view_camera_ypos2)
			tps_cam_ypos2.Type = vtSingle
			tps_cam_ypos2.appendToEntry(header)

			tps_cam_zpos2.Description = "tpscam_camera_axis_zoom"
			tps_cam_zpos2.setAddress(third_person_view_camera_zpos2)
			tps_cam_zpos2.Type = vtSingle
			tps_cam_zpos2.appendToEntry(header)

			as_cam_pitch.Description = "Analog stick camera pitch"
			as_cam_pitch.setAddress(analog_stick_camera_movement_pitch)
			as_cam_pitch.Type = vtSingle
			as_cam_pitch.appendToEntry(header)

			as_cam_yaw.Description = "Analog stick camera yaw"
			as_cam_yaw.setAddress(analog_stick_camera_movement_yaw)
			as_cam_yaw.Type = vtSingle
			as_cam_yaw.appendToEntry(header)

			as_cam_roll.Description = "Analog stick camera roll"
			as_cam_roll.setAddress(analog_stick_camera_movement_roll)
			as_cam_roll.Type = vtSingle
			as_cam_roll.appendToEntry(header)

			p_state.Description = "Pause state"
			p_state.setAddress(pause_state)
			p_state.Type = vtByte
			p_state.appendToEntry(header)

			c_state.Description = "Controller input state"
			c_state.setAddress(controller_state)
			c_state.Aob.Size = 04
			c_state.ShowAsHex = true
			c_state.appendToEntry(header)

			h_state.Description = "HUD state"
			h_state.setAddress(hud_state)
			h_state.Type = vtByte
			h_state.appendToEntry(header)


		end
		fl.destroy()
		fl=nil
	else
		ms.destroy()
	end
	ms.destroy()

{$asm}
[DISABLE]
{$lua}
header.destroy()
{$asm}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>12677</ID>
      <Description>"///----------Entries created by the scrpts above will appear below this line----------///"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>004000</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
